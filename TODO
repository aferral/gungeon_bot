# Dependencias
# sudo apt-get install xtightvncviewer
# install xvfb, x11vnc

# Para el label de imagen usar https://github.com/tzutalin/labelImg

# TODO0 investigar tf.saved_model
# https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md

# TODO trabajar en rectificacion de estado

# TODO? agregar post proceso bbs?? (eliminar cuadrados muy pequenos o grandes)
# Posible integracion de distancias??


# TODO idea feature detector de movimiento?? (optical flow)


# TODO calcular terreno inapasable

# TODO ENVIAR A ESTADO CONGELA SI NO ESTA CONECTADO


# TODO pipeline de escalar entidades???

# TODO orquestar pipeline + state_fusion

# TODO crear en deplot algo que mate todos ls processo de captura a la vez
# todo la arquitectura de un frame buffer parece interesante (http://algomuse.com/c-c/developing-a-multithreaded-real-time-video-processing-application-in-opencv)

# TODO mejorar algo sistema de balas?? no detecta bien cuando estan muy juntas o por color
# TODO mejora de deteccion enemigos, usar blanco y negro o colores HSV.

# TODO mejorar pipeline de feed function. Requiero que sea un proceso algo estilo cliente servidor para las frames
# TODO colocar unixx socket a captura de imagenes???

# Luego cada proceso llama un get_frame como feedfunction
# Para generar el dummy que toca un video se utilizaria el mismo asunto pero que avanze con cierto timeout
# Para el modo de prueba tiene que entregar en secuencia para cada conexion.


Pipeline



# inicia juego en otra pantalla y captura imagenes a carpeta images_buffer
sh launch_xserver.sh 

# iniciar sample de imagenes. Toma cada 1 s imagene de images_buffer y las coloca en ./samples
python -m clf_images/a_sample_images

# Iniciar captura de image (toma la ultima imagen de images_buffer)
# Y calcula las features como posicion jugador, posicion enemigos, disparos, etc
python main.py


# Puede ser necesario acelerar la prediccion (https://www.dlology.com/blog/how-to-run-tensorflow-object-detection-model-faster-with-intel-graphics/)

# Idea simple: Las funciones corren todo el rato


# El procesador de estados siempre esta leyendo y revisando el estado actual.
# Su funcion es limpiar el ruido en los datos de forma de tener uan senal limpia de estado
# Debe tener una metrica de incertidumbre para lanzar el planner
# Si es alta esta metrica sigue alimentandose
# Si considera que el estado es estable envia por unix socket 
# Se envia por unix socket 
#
# El planer abre el estado y consigue accion a realizar

# 	- REQUISITOS
# 		- debe poder mantener una lista de mensajes en espera 
# 		- Lista debe ser secuencia
# 		- Que ocurre si se llena???
# 			-- Idealmente botar los antiguos
#		- Idealmente que sea facil de conectar o desconectar
#
# Arquitectura
# proceso detector de terreno       -> P fusion: agrega terreno a historico y calcula estimacion actual
# proceso detector de enemigos      -> P fusion: calcula dado historico, actual estimacion actual
# proceso detector de balas         -> P fusion: dado historico, actual estima
# proceso detector de vidas,blanks  -> P fusion: same
# proceso detector de mira          -> P fusion: same
#
#  mensajes son {'timestamp' : x,variables} esto deberia ser de un size fijo
# P fusion: 
# 	- Hilos separados: escriben 
# 	- Espera hasta lectura en cualquiera de los sockets
#       - actualiza el valor especifico
#	- Proceso principal tiene el ultimo estimado de todas las variables relevantes y timestamp de ultimo mensaje
#       
#       - tambien calcula cierta condicion cada cierto tiempo para enviar accion de forma frecuente.
#	- Dado estado filtrado envia accion
#




# inicia proceso de samples


# crear un overlay en tiempo real de la ultima frame que muestre boundings boxes
# de todo lo detectable

# Paso extra faltante conseguir geometria del cuarto (quizas del minimapa??)

# Paso A
# Dado imagen estatica distinguir (pos_jugador,pos mira,hp,blanks,enemigos,disparos_enemigos)

# Paso B refinamiento dado historia
# Idealemente cada enemgio, bala debe ser distinguible
# Dado informacion estatica complementar con historica
# Generar estado filtrado

